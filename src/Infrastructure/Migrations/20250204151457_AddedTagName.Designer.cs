// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250204151457_AddedTagName")]
    partial class AddedTagName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbContactSpecification", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DbContactSpecification_type")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EntityId");

                    b.ToTable("ContactSpecifications");

                    b.HasDiscriminator<string>("DbContactSpecification_type").HasValue("DbContactSpecification");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbContactSpecificationProjectConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactSpecificationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("ContactSpecificationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ContactSpecificationConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbDescriptionSpecification", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TypeEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("TypeEntityId");

                    b.ToTable("DescriptionSpecifications");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbDescriptionSpecificationProjectConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DescriptionSpecificationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("DescriptionSpecificationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("DescriptionSpecificationProjectConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbDescriptionType", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("DescriptionTypes");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbGraphicsSpecification", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.ToTable("GraphicsSpecifications");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbGraphicsSpecificationProjectConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GraphicsSpecificationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("GraphicsSpecificationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("GraphicsSpecificationProjectConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbLocationSpecification", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DbLocationSpecification_type")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EntityId");

                    b.ToTable("LocationSpecifications");

                    b.HasDiscriminator<string>("DbLocationSpecification_type").HasValue("DbLocationSpecification");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbLocationSpecificationProjectConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationSpecificationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("LocationSpecificationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("LocationSpecificationProjectConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbLocationSpecificationRequirementConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DbRequirementSpecificationMaterialEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DbRequirementSpecificationPersonEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationSpecificationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequirementSpecificationId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("DbRequirementSpecificationMaterialEntityId");

                    b.HasIndex("DbRequirementSpecificationPersonEntityId")
                        .HasDatabaseName("IX_LocationSpecificationRequirementConnections_DbRequirementS~1");

                    b.HasIndex("LocationSpecificationId");

                    b.HasIndex("RequirementSpecificationId");

                    b.ToTable("LocationSpecificationRequirementConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbMaterialSpecification", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("EntityId");

                    b.ToTable("MaterialSpecifications");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbMaterialSpecificationRequirementConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DbRequirementSpecificationMaterialEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialSpecificationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequirementSpecificationId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("DbRequirementSpecificationMaterialEntityId");

                    b.HasIndex("MaterialSpecificationId");

                    b.HasIndex("RequirementSpecificationId");

                    b.ToTable("MaterialSpecificationRequirementConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbModificationHistory", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbModificationHistoryItem", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HistoryEntryType")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("HistoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EntityId");

                    b.HasIndex("HistoryId");

                    b.ToTable("HistoryItems");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbOrganization", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("EntityId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbOrganizationConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbOrganizationPositionConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DbOrganizationConnectionEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("DbOrganizationConnectionEntityId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationPositionConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbOrganizationProjectConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("OrganizationProjectConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbPerson", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DbPerson_type")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("EntityId");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("DbPerson_type").HasValue("DbPerson");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbPersonProjectContributorConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ProjectId");

                    b.ToTable("PersonProjectContributorConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbPersonProjectOwnerConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("PersonProjectOwnerConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbProject", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("ConnectedOrganizationsSameAsOwner")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Phase")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbProjectConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RelatedProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("EntityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RelatedProjectId");

                    b.ToTable("ProjectConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbProjectTag", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("ProjectTags");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbProjectTagConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectTagId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectTagId");

                    b.ToTable("ProjectTagConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbQuantitySpecification", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("EntityId");

                    b.ToTable("QuantitySpecifications");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbQuantitySpecificationRequirementConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuantitySpecificationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequirementSpecificationId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("QuantitySpecificationId");

                    b.HasIndex("RequirementSpecificationId")
                        .IsUnique();

                    b.ToTable("QuantitySpecificationRequirementConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbRequirementSpecification", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DbRequirementSpecification_type")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TimeSpecificationSameAsProject")
                        .HasColumnType("boolean");

                    b.HasKey("EntityId");

                    b.ToTable("RequirementSpecifications");

                    b.HasDiscriminator<string>("DbRequirementSpecification_type").HasValue("DbRequirementSpecification");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbRequirementSpecificationProjectConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequirementSpecificationId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RequirementSpecificationId");

                    b.ToTable("RequirementSpecificationConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbSkillSpecification", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("EntityId");

                    b.ToTable("SkillSpecifications");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbSkillSpecificationRequirementConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DbRequirementSpecificationPersonEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequirementSpecificationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillSpecificationId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("DbRequirementSpecificationPersonEntityId");

                    b.HasIndex("RequirementSpecificationId");

                    b.HasIndex("SkillSpecificationId");

                    b.ToTable("SkillSpecificationRequirementConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbTimeSpecification", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DbTimeSpecification_type")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EntityId");

                    b.ToTable("TimeSpecifications");

                    b.HasDiscriminator<string>("DbTimeSpecification_type").HasValue("DbTimeSpecification");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbTimeSpecificationProjectConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TimeSpecificationId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TimeSpecificationId");

                    b.ToTable("TimeSpecificationProjectConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbTimeSpecificationRequirementConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequirementSpecificationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TimeSpecificationId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("RequirementSpecificationId");

                    b.HasIndex("TimeSpecificationId");

                    b.ToTable("TimeSpecificationRequirementConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbUserRefreshTokens", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("AbsoluteExpirationUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbWorkAmountSpecification", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("EntityId");

                    b.ToTable("WorkAmountSpecifications");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbWorkAmountSpecificationRequirementConnection", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequirementSpecificationPersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkAmountSpecificationId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("RequirementSpecificationPersonId")
                        .IsUnique();

                    b.HasIndex("WorkAmountSpecificationId");

                    b.ToTable("WorkAmountSpecificationRequirementConnections");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbContactSpecificationMailAddress", b =>
                {
                    b.HasBaseType("Infrastructure.Data.DbEntities.DbContactSpecification");

                    b.ToTable("ContactSpecifications");

                    b.HasDiscriminator().HasValue("DbContactSpecificationMailAddress");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbContactSpecificationPhoneNumber", b =>
                {
                    b.HasBaseType("Infrastructure.Data.DbEntities.DbContactSpecification");

                    b.ToTable("ContactSpecifications");

                    b.HasDiscriminator().HasValue("DbContactSpecificationPhoneNumber");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbContactSpecificationPostalAddress", b =>
                {
                    b.HasBaseType("Infrastructure.Data.DbEntities.DbContactSpecification");

                    b.ToTable("ContactSpecifications");

                    b.HasDiscriminator().HasValue("DbContactSpecificationPostalAddress");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbLocationSpecificationAddress", b =>
                {
                    b.HasBaseType("Infrastructure.Data.DbEntities.DbLocationSpecification");

                    b.ToTable("LocationSpecifications");

                    b.HasDiscriminator().HasValue("DbLocationSpecificationAddress");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbLocationSpecificationCoordinates", b =>
                {
                    b.HasBaseType("Infrastructure.Data.DbEntities.DbLocationSpecification");

                    b.ToTable("LocationSpecifications");

                    b.HasDiscriminator().HasValue("DbLocationSpecificationCoordinates");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbLocationSpecificationRegion", b =>
                {
                    b.HasBaseType("Infrastructure.Data.DbEntities.DbLocationSpecification");

                    b.ToTable("LocationSpecifications");

                    b.HasDiscriminator().HasValue("DbLocationSpecificationRegion");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbLocationSpecificationRemote", b =>
                {
                    b.HasBaseType("Infrastructure.Data.DbEntities.DbLocationSpecification");

                    b.ToTable("LocationSpecifications");

                    b.HasDiscriminator().HasValue("DbLocationSpecificationRemote");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbUser", b =>
                {
                    b.HasBaseType("Infrastructure.Data.DbEntities.DbPerson");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.ToTable("Persons");

                    b.HasDiscriminator().HasValue("DbUser");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbRequirementSpecificationMaterial", b =>
                {
                    b.HasBaseType("Infrastructure.Data.DbEntities.DbRequirementSpecification");

                    b.Property<bool>("LocationSpecificationsSameAsProject")
                        .HasColumnType("boolean");

                    b.ToTable("RequirementSpecifications");

                    b.HasDiscriminator().HasValue("DbRequirementSpecificationMaterial");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbRequirementSpecificationMoney", b =>
                {
                    b.HasBaseType("Infrastructure.Data.DbEntities.DbRequirementSpecification");

                    b.ToTable("RequirementSpecifications");

                    b.HasDiscriminator().HasValue("DbRequirementSpecificationMoney");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbRequirementSpecificationPerson", b =>
                {
                    b.HasBaseType("Infrastructure.Data.DbEntities.DbRequirementSpecification");

                    b.Property<bool>("LocationSpecificationsSameAsProject")
                        .HasColumnType("boolean");

                    b.ToTable("RequirementSpecifications", t =>
                        {
                            t.Property("LocationSpecificationsSameAsProject")
                                .HasColumnName("DbRequirementSpecificationPerson_LocationSpecificationsSameAsP~");
                        });

                    b.HasDiscriminator().HasValue("DbRequirementSpecificationPerson");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbTimeSpecificationMoment", b =>
                {
                    b.HasBaseType("Infrastructure.Data.DbEntities.DbTimeSpecification");

                    b.ToTable("TimeSpecifications");

                    b.HasDiscriminator().HasValue("DbTimeSpecificationMoment");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbTimeSpecificationPeriod", b =>
                {
                    b.HasBaseType("Infrastructure.Data.DbEntities.DbTimeSpecification");

                    b.ToTable("TimeSpecifications");

                    b.HasDiscriminator().HasValue("DbTimeSpecificationPeriod");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbTimeSpecificationDate", b =>
                {
                    b.HasBaseType("Infrastructure.Data.DbEntities.DbTimeSpecificationMoment");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.ToTable("TimeSpecifications");

                    b.HasDiscriminator().HasValue("DbTimeSpecificationDate");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbTimeSpecificationDateTime", b =>
                {
                    b.HasBaseType("Infrastructure.Data.DbEntities.DbTimeSpecificationMoment");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("TimeSpecifications", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("DbTimeSpecificationDateTime_Date");
                        });

                    b.HasDiscriminator().HasValue("DbTimeSpecificationDateTime");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbTimeSpecificationMonth", b =>
                {
                    b.HasBaseType("Infrastructure.Data.DbEntities.DbTimeSpecificationMoment");

                    b.ToTable("TimeSpecifications");

                    b.HasDiscriminator().HasValue("DbTimeSpecificationMonth");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbContactSpecification", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonCreatedByConnection", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("DbContactSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbContactSpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("ContactSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbContactSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbModificationHistoryConnection", "History", b1 =>
                        {
                            b1.Property<Guid>("DbContactSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("HistoryId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbContactSpecificationEntityId");

                            b1.HasIndex("HistoryId");

                            b1.ToTable("ContactSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbContactSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbModificationHistory", "History")
                                .WithMany()
                                .HasForeignKey("HistoryId");

                            b1.Navigation("History");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonLastModifiedByConnection", "LastModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("DbContactSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbContactSpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("ContactSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbContactSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("History");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbContactSpecificationProjectConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbContactSpecification", "ContactSpecification")
                        .WithMany()
                        .HasForeignKey("ContactSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.DbEntities.DbProject", "Project")
                        .WithMany("ContactSpecifications")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactSpecification");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbDescriptionSpecification", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbDescriptionType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Infrastructure.Data.DbDataTypes.DbFormattedContent", "Content", b1 =>
                        {
                            b1.Property<Guid>("DbDescriptionSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("RawContentString")
                                .IsRequired()
                                .HasMaxLength(50000)
                                .HasColumnType("character varying(50000)");

                            b1.HasKey("DbDescriptionSpecificationEntityId");

                            b1.ToTable("DescriptionSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbDescriptionSpecificationEntityId");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonCreatedByConnection", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("DbDescriptionSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbDescriptionSpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("DescriptionSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbDescriptionSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbModificationHistoryConnection", "History", b1 =>
                        {
                            b1.Property<Guid>("DbDescriptionSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("HistoryId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbDescriptionSpecificationEntityId");

                            b1.HasIndex("HistoryId");

                            b1.ToTable("DescriptionSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbDescriptionSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbModificationHistory", "History")
                                .WithMany()
                                .HasForeignKey("HistoryId");

                            b1.Navigation("History");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonLastModifiedByConnection", "LastModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("DbDescriptionSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbDescriptionSpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("DescriptionSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbDescriptionSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.Navigation("Content")
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("History");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbDescriptionSpecificationProjectConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbDescriptionSpecification", "DescriptionSpecification")
                        .WithMany()
                        .HasForeignKey("DescriptionSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.DbEntities.DbProject", "Project")
                        .WithMany("DescriptionSpecifications")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DescriptionSpecification");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbDescriptionType", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonCreatedByConnection", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("DbDescriptionTypeEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbDescriptionTypeEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("DescriptionTypes");

                            b1.WithOwner()
                                .HasForeignKey("DbDescriptionTypeEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbDataTypes.DbFormattedTitle", "DescriptionTitle", b1 =>
                        {
                            b1.Property<Guid>("DbDescriptionTypeEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("RawContentString")
                                .IsRequired()
                                .HasMaxLength(5000)
                                .HasColumnType("character varying(5000)");

                            b1.HasKey("DbDescriptionTypeEntityId");

                            b1.ToTable("DescriptionTypes");

                            b1.WithOwner()
                                .HasForeignKey("DbDescriptionTypeEntityId");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbModificationHistoryConnection", "History", b1 =>
                        {
                            b1.Property<Guid>("DbDescriptionTypeEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("HistoryId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbDescriptionTypeEntityId");

                            b1.HasIndex("HistoryId");

                            b1.ToTable("DescriptionTypes");

                            b1.WithOwner()
                                .HasForeignKey("DbDescriptionTypeEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbModificationHistory", "History")
                                .WithMany()
                                .HasForeignKey("HistoryId");

                            b1.Navigation("History");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonLastModifiedByConnection", "LastModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("DbDescriptionTypeEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbDescriptionTypeEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("DescriptionTypes");

                            b1.WithOwner()
                                .HasForeignKey("DbDescriptionTypeEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("DescriptionTitle")
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbGraphicsSpecification", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbDataTypes.DbGraphicsContent", "Content", b1 =>
                        {
                            b1.Property<Guid>("DbGraphicsSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<byte[]>("Content")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.HasKey("DbGraphicsSpecificationEntityId");

                            b1.ToTable("GraphicsSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbGraphicsSpecificationEntityId");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonCreatedByConnection", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("DbGraphicsSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbGraphicsSpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("GraphicsSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbGraphicsSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbModificationHistoryConnection", "History", b1 =>
                        {
                            b1.Property<Guid>("DbGraphicsSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("HistoryId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbGraphicsSpecificationEntityId");

                            b1.HasIndex("HistoryId");

                            b1.ToTable("GraphicsSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbGraphicsSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbModificationHistory", "History")
                                .WithMany()
                                .HasForeignKey("HistoryId");

                            b1.Navigation("History");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonLastModifiedByConnection", "LastModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("DbGraphicsSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbGraphicsSpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("GraphicsSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbGraphicsSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.Navigation("Content")
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("History");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbGraphicsSpecificationProjectConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbGraphicsSpecification", "GraphicsSpecification")
                        .WithMany()
                        .HasForeignKey("GraphicsSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.DbEntities.DbProject", "Project")
                        .WithMany("GraphicsSpecifications")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GraphicsSpecification");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbLocationSpecification", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonCreatedByConnection", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("DbLocationSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbLocationSpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("LocationSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbLocationSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbModificationHistoryConnection", "History", b1 =>
                        {
                            b1.Property<Guid>("DbLocationSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("HistoryId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbLocationSpecificationEntityId");

                            b1.HasIndex("HistoryId");

                            b1.ToTable("LocationSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbLocationSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbModificationHistory", "History")
                                .WithMany()
                                .HasForeignKey("HistoryId");

                            b1.Navigation("History");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonLastModifiedByConnection", "LastModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("DbLocationSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbLocationSpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("LocationSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbLocationSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("History");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbLocationSpecificationProjectConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbLocationSpecification", "LocationSpecification")
                        .WithMany()
                        .HasForeignKey("LocationSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.DbEntities.DbProject", "Project")
                        .WithMany("LocationSpecifications")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocationSpecification");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbLocationSpecificationRequirementConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbRequirementSpecificationMaterial", null)
                        .WithMany("LocationSpecifications")
                        .HasForeignKey("DbRequirementSpecificationMaterialEntityId");

                    b.HasOne("Infrastructure.Data.DbEntities.DbRequirementSpecificationPerson", null)
                        .WithMany("LocationSpecifications")
                        .HasForeignKey("DbRequirementSpecificationPersonEntityId")
                        .HasConstraintName("FK_LocationSpecificationRequirementConnections_RequirementSpe~1");

                    b.HasOne("Infrastructure.Data.DbEntities.DbLocationSpecification", "LocationSpecification")
                        .WithMany()
                        .HasForeignKey("LocationSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.DbEntities.DbRequirementSpecification", "RequirementSpecification")
                        .WithMany()
                        .HasForeignKey("RequirementSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LocationSpecificationRequirementConnections_RequirementSpe~2");

                    b.Navigation("LocationSpecification");

                    b.Navigation("RequirementSpecification");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbMaterialSpecification", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonCreatedByConnection", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("DbMaterialSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbMaterialSpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("MaterialSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbMaterialSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbDataTypes.DbFormattedContent", "Description", b1 =>
                        {
                            b1.Property<Guid>("DbMaterialSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("RawContentString")
                                .IsRequired()
                                .HasMaxLength(50000)
                                .HasColumnType("character varying(50000)");

                            b1.HasKey("DbMaterialSpecificationEntityId");

                            b1.ToTable("MaterialSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbMaterialSpecificationEntityId");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbModificationHistoryConnection", "History", b1 =>
                        {
                            b1.Property<Guid>("DbMaterialSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("HistoryId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbMaterialSpecificationEntityId");

                            b1.HasIndex("HistoryId");

                            b1.ToTable("MaterialSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbMaterialSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbModificationHistory", "History")
                                .WithMany()
                                .HasForeignKey("HistoryId");

                            b1.Navigation("History");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonLastModifiedByConnection", "LastModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("DbMaterialSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbMaterialSpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("MaterialSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbMaterialSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbDataTypes.DbFormattedContent", "Title", b1 =>
                        {
                            b1.Property<Guid>("DbMaterialSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("RawContentString")
                                .IsRequired()
                                .HasMaxLength(50000)
                                .HasColumnType("character varying(50000)");

                            b1.HasKey("DbMaterialSpecificationEntityId");

                            b1.ToTable("MaterialSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbMaterialSpecificationEntityId");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbMaterialSpecificationRequirementConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbRequirementSpecificationMaterial", null)
                        .WithMany("MaterialSpecifications")
                        .HasForeignKey("DbRequirementSpecificationMaterialEntityId");

                    b.HasOne("Infrastructure.Data.DbEntities.DbMaterialSpecification", "MaterialSpecification")
                        .WithMany()
                        .HasForeignKey("MaterialSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.DbEntities.DbRequirementSpecification", "RequirementSpecification")
                        .WithMany()
                        .HasForeignKey("RequirementSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MaterialSpecificationRequirementConnections_RequirementSpe~1");

                    b.Navigation("MaterialSpecification");

                    b.Navigation("RequirementSpecification");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbModificationHistoryItem", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbModificationHistory", "History")
                        .WithMany("HistoryItems")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbOrganization", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonCreatedByConnection", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("DbOrganizationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbOrganizationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("Organizations");

                            b1.WithOwner()
                                .HasForeignKey("DbOrganizationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbModificationHistoryConnection", "History", b1 =>
                        {
                            b1.Property<Guid>("DbOrganizationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("HistoryId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbOrganizationEntityId");

                            b1.HasIndex("HistoryId");

                            b1.ToTable("Organizations");

                            b1.WithOwner()
                                .HasForeignKey("DbOrganizationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbModificationHistory", "History")
                                .WithMany()
                                .HasForeignKey("HistoryId");

                            b1.Navigation("History");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonLastModifiedByConnection", "LastModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("DbOrganizationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbOrganizationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("Organizations");

                            b1.WithOwner()
                                .HasForeignKey("DbOrganizationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("History");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbOrganizationConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbOrganization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbOrganizationPositionConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbOrganizationConnection", null)
                        .WithMany("OrganizationPositions")
                        .HasForeignKey("DbOrganizationConnectionEntityId");

                    b.HasOne("Infrastructure.Data.DbEntities.DbOrganization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Infrastructure.Data.DbDataTypes.DbOrganizationPosition", "OrganizationPosition", b1 =>
                        {
                            b1.Property<Guid>("DbOrganizationPositionConnectionEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PositionName")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.HasKey("DbOrganizationPositionConnectionEntityId");

                            b1.ToTable("OrganizationPositionConnections");

                            b1.WithOwner()
                                .HasForeignKey("DbOrganizationPositionConnectionEntityId");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonCreatedByConnection", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("DbOrganizationPositionConnectionEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbOrganizationPositionConnectionEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("OrganizationPositionConnections");

                            b1.WithOwner()
                                .HasForeignKey("DbOrganizationPositionConnectionEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbModificationHistoryConnection", "History", b1 =>
                        {
                            b1.Property<Guid>("DbOrganizationPositionConnectionEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("HistoryId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbOrganizationPositionConnectionEntityId");

                            b1.HasIndex("HistoryId");

                            b1.ToTable("OrganizationPositionConnections");

                            b1.WithOwner()
                                .HasForeignKey("DbOrganizationPositionConnectionEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbModificationHistory", "History")
                                .WithMany()
                                .HasForeignKey("HistoryId");

                            b1.Navigation("History");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonLastModifiedByConnection", "LastModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("DbOrganizationPositionConnectionEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbOrganizationPositionConnectionEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("OrganizationPositionConnections");

                            b1.WithOwner()
                                .HasForeignKey("DbOrganizationPositionConnectionEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("History");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Organization");

                    b.Navigation("OrganizationPosition")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbOrganizationProjectConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbOrganization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.DbEntities.DbProject", "Project")
                        .WithMany("ConnectedOrganizations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbPerson", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonCreatedByConnection", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("DbPersonEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbPersonEntityId");

                            b1.HasIndex("PersonId")
                                .IsUnique();

                            b1.ToTable("Persons");

                            b1.WithOwner()
                                .HasForeignKey("DbPersonEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithOne()
                                .HasForeignKey("Infrastructure.Data.DbEntities.DbPerson.CreatedBy#Infrastructure.Data.DbEntities.DbEntityPersonCreatedByConnection", "PersonId");

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbModificationHistoryConnection", "History", b1 =>
                        {
                            b1.Property<Guid>("DbPersonEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("HistoryId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbPersonEntityId");

                            b1.HasIndex("HistoryId");

                            b1.ToTable("Persons");

                            b1.WithOwner()
                                .HasForeignKey("DbPersonEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbModificationHistory", "History")
                                .WithMany()
                                .HasForeignKey("HistoryId");

                            b1.Navigation("History");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonLastModifiedByConnection", "LastModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("DbPersonEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbPersonEntityId");

                            b1.HasIndex("PersonId")
                                .IsUnique();

                            b1.ToTable("Persons");

                            b1.WithOwner()
                                .HasForeignKey("DbPersonEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithOne()
                                .HasForeignKey("Infrastructure.Data.DbEntities.DbPerson.LastModifiedBy#Infrastructure.Data.DbEntities.DbEntityPersonLastModifiedByConnection", "PersonId");

                            b1.Navigation("Person");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("History");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbPersonProjectContributorConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.DbEntities.DbProject", "Project")
                        .WithMany("Contributors")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbPersonProjectOwnerConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.DbEntities.DbProject", "Project")
                        .WithOne("Owner")
                        .HasForeignKey("Infrastructure.Data.DbEntities.DbPersonProjectOwnerConnection", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbProject", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonCreatedByConnection", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("DbProjectEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbProjectEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("DbProjectEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbModificationHistoryConnection", "History", b1 =>
                        {
                            b1.Property<Guid>("DbProjectEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("HistoryId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbProjectEntityId");

                            b1.HasIndex("HistoryId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("DbProjectEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbModificationHistory", "History")
                                .WithMany()
                                .HasForeignKey("HistoryId");

                            b1.Navigation("History");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonLastModifiedByConnection", "LastModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("DbProjectEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbProjectEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("DbProjectEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbDataTypes.DbFormattedTitle", "ProjectTitle", b1 =>
                        {
                            b1.Property<Guid>("DbProjectEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("RawContentString")
                                .IsRequired()
                                .HasMaxLength(5000)
                                .HasColumnType("character varying(5000)");

                            b1.HasKey("DbProjectEntityId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("DbProjectEntityId");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("History");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("ProjectTitle")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbProjectConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbProject", "Project")
                        .WithMany("RelatedProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.DbEntities.DbProject", "RelatedProject")
                        .WithMany()
                        .HasForeignKey("RelatedProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("RelatedProject");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbProjectTag", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonCreatedByConnection", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("DbProjectTagEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbProjectTagEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("ProjectTags");

                            b1.WithOwner()
                                .HasForeignKey("DbProjectTagEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbModificationHistoryConnection", "History", b1 =>
                        {
                            b1.Property<Guid>("DbProjectTagEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("HistoryId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbProjectTagEntityId");

                            b1.HasIndex("HistoryId");

                            b1.ToTable("ProjectTags");

                            b1.WithOwner()
                                .HasForeignKey("DbProjectTagEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbModificationHistory", "History")
                                .WithMany()
                                .HasForeignKey("HistoryId");

                            b1.Navigation("History");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonLastModifiedByConnection", "LastModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("DbProjectTagEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbProjectTagEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("ProjectTags");

                            b1.WithOwner()
                                .HasForeignKey("DbProjectTagEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("History");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbProjectTagConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbProject", "Project")
                        .WithMany("ProjectTags")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.DbEntities.DbProjectTag", "ProjectTag")
                        .WithMany()
                        .HasForeignKey("ProjectTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("ProjectTag");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbQuantitySpecification", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonCreatedByConnection", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("DbQuantitySpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbQuantitySpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("QuantitySpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbQuantitySpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbModificationHistoryConnection", "History", b1 =>
                        {
                            b1.Property<Guid>("DbQuantitySpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("HistoryId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbQuantitySpecificationEntityId");

                            b1.HasIndex("HistoryId");

                            b1.ToTable("QuantitySpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbQuantitySpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbModificationHistory", "History")
                                .WithMany()
                                .HasForeignKey("HistoryId");

                            b1.Navigation("History");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonLastModifiedByConnection", "LastModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("DbQuantitySpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbQuantitySpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("QuantitySpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbQuantitySpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("History");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbQuantitySpecificationRequirementConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbQuantitySpecification", "QuantitySpecification")
                        .WithMany()
                        .HasForeignKey("QuantitySpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.DbEntities.DbRequirementSpecification", "RequirementSpecification")
                        .WithOne("QuantitySpecification")
                        .HasForeignKey("Infrastructure.Data.DbEntities.DbQuantitySpecificationRequirementConnection", "RequirementSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuantitySpecification");

                    b.Navigation("RequirementSpecification");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbRequirementSpecification", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonCreatedByConnection", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("DbRequirementSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbRequirementSpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("RequirementSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbRequirementSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbModificationHistoryConnection", "History", b1 =>
                        {
                            b1.Property<Guid>("DbRequirementSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("HistoryId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbRequirementSpecificationEntityId");

                            b1.HasIndex("HistoryId");

                            b1.ToTable("RequirementSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbRequirementSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbModificationHistory", "History")
                                .WithMany()
                                .HasForeignKey("HistoryId");

                            b1.Navigation("History");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonLastModifiedByConnection", "LastModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("DbRequirementSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbRequirementSpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("RequirementSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbRequirementSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("History");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbRequirementSpecificationProjectConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbProject", "Project")
                        .WithMany("RequirementSpecifications")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.DbEntities.DbRequirementSpecification", "RequirementSpecification")
                        .WithMany()
                        .HasForeignKey("RequirementSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("RequirementSpecification");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbSkillSpecification", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonCreatedByConnection", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("DbSkillSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbSkillSpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("SkillSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbSkillSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbModificationHistoryConnection", "History", b1 =>
                        {
                            b1.Property<Guid>("DbSkillSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("HistoryId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbSkillSpecificationEntityId");

                            b1.HasIndex("HistoryId");

                            b1.ToTable("SkillSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbSkillSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbModificationHistory", "History")
                                .WithMany()
                                .HasForeignKey("HistoryId");

                            b1.Navigation("History");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonLastModifiedByConnection", "LastModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("DbSkillSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbSkillSpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("SkillSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbSkillSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbDataTypes.DbFormattedContent", "Title", b1 =>
                        {
                            b1.Property<Guid>("DbSkillSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("RawContentString")
                                .IsRequired()
                                .HasMaxLength(50000)
                                .HasColumnType("character varying(50000)");

                            b1.HasKey("DbSkillSpecificationEntityId");

                            b1.ToTable("SkillSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbSkillSpecificationEntityId");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("History");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbSkillSpecificationRequirementConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbRequirementSpecificationPerson", null)
                        .WithMany("SkillSpecifications")
                        .HasForeignKey("DbRequirementSpecificationPersonEntityId");

                    b.HasOne("Infrastructure.Data.DbEntities.DbRequirementSpecification", "RequirementSpecification")
                        .WithMany()
                        .HasForeignKey("RequirementSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SkillSpecificationRequirementConnections_RequirementSpecif~1");

                    b.HasOne("Infrastructure.Data.DbEntities.DbSkillSpecification", "SkillSpecification")
                        .WithMany()
                        .HasForeignKey("SkillSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequirementSpecification");

                    b.Navigation("SkillSpecification");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbTimeSpecification", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonCreatedByConnection", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("DbTimeSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbTimeSpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("TimeSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbTimeSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbModificationHistoryConnection", "History", b1 =>
                        {
                            b1.Property<Guid>("DbTimeSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("HistoryId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbTimeSpecificationEntityId");

                            b1.HasIndex("HistoryId");

                            b1.ToTable("TimeSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbTimeSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbModificationHistory", "History")
                                .WithMany()
                                .HasForeignKey("HistoryId");

                            b1.Navigation("History");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonLastModifiedByConnection", "LastModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("DbTimeSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbTimeSpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("TimeSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbTimeSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("History");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbTimeSpecificationProjectConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbProject", "Project")
                        .WithMany("TimeSpecifications")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.DbEntities.DbTimeSpecification", "TimeSpecification")
                        .WithMany()
                        .HasForeignKey("TimeSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("TimeSpecification");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbTimeSpecificationRequirementConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbRequirementSpecification", "RequirementSpecification")
                        .WithMany("TimeSpecifications")
                        .HasForeignKey("RequirementSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.DbEntities.DbTimeSpecification", "TimeSpecification")
                        .WithMany()
                        .HasForeignKey("TimeSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequirementSpecification");

                    b.Navigation("TimeSpecification");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbUserRefreshTokens", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonCreatedByConnection", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("DbUserRefreshTokensEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbUserRefreshTokensEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("UserRefreshTokens");

                            b1.WithOwner()
                                .HasForeignKey("DbUserRefreshTokensEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbModificationHistoryConnection", "History", b1 =>
                        {
                            b1.Property<Guid>("DbUserRefreshTokensEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("HistoryId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbUserRefreshTokensEntityId");

                            b1.HasIndex("HistoryId");

                            b1.ToTable("UserRefreshTokens");

                            b1.WithOwner()
                                .HasForeignKey("DbUserRefreshTokensEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbModificationHistory", "History")
                                .WithMany()
                                .HasForeignKey("HistoryId");

                            b1.Navigation("History");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonLastModifiedByConnection", "LastModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("DbUserRefreshTokensEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbUserRefreshTokensEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("UserRefreshTokens");

                            b1.WithOwner()
                                .HasForeignKey("DbUserRefreshTokensEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("History");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbWorkAmountSpecification", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonCreatedByConnection", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("DbWorkAmountSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbWorkAmountSpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("WorkAmountSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbWorkAmountSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbModificationHistoryConnection", "History", b1 =>
                        {
                            b1.Property<Guid>("DbWorkAmountSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("HistoryId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbWorkAmountSpecificationEntityId");

                            b1.HasIndex("HistoryId");

                            b1.ToTable("WorkAmountSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbWorkAmountSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbModificationHistory", "History")
                                .WithMany()
                                .HasForeignKey("HistoryId");

                            b1.Navigation("History");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbEntityPersonLastModifiedByConnection", "LastModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("DbWorkAmountSpecificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbWorkAmountSpecificationEntityId");

                            b1.HasIndex("PersonId");

                            b1.ToTable("WorkAmountSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbWorkAmountSpecificationEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbPerson", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Person");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("History");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbWorkAmountSpecificationRequirementConnection", b =>
                {
                    b.HasOne("Infrastructure.Data.DbEntities.DbRequirementSpecificationPerson", "RequirementSpecificationPerson")
                        .WithOne("WorkAmountSpecification")
                        .HasForeignKey("Infrastructure.Data.DbEntities.DbWorkAmountSpecificationRequirementConnection", "RequirementSpecificationPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.DbEntities.DbWorkAmountSpecification", "WorkAmountSpecification")
                        .WithMany()
                        .HasForeignKey("WorkAmountSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequirementSpecificationPerson");

                    b.Navigation("WorkAmountSpecification");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbContactSpecificationMailAddress", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbDataTypes.DbMailAddress", "MailAddress", b1 =>
                        {
                            b1.Property<Guid>("DbContactSpecificationMailAddressEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Mail")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DbContactSpecificationMailAddressEntityId");

                            b1.ToTable("ContactSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbContactSpecificationMailAddressEntityId");
                        });

                    b.Navigation("MailAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbContactSpecificationPhoneNumber", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbDataTypes.DbPhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("DbContactSpecificationPhoneNumberEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PhoneNumberText")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.HasKey("DbContactSpecificationPhoneNumberEntityId");

                            b1.ToTable("ContactSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbContactSpecificationPhoneNumberEntityId");
                        });

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbContactSpecificationPostalAddress", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbDataTypes.DbPostalAddress", "PostalAddress", b1 =>
                        {
                            b1.Property<Guid>("DbContactSpecificationPostalAddressEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AddressLine1")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("AddressLine2")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("AddressLine3")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("AddressLine4")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("AddressLine5")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("AddressLine6")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.HasKey("DbContactSpecificationPostalAddressEntityId");

                            b1.ToTable("ContactSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbContactSpecificationPostalAddressEntityId");
                        });

                    b.Navigation("PostalAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbLocationSpecificationAddress", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbDataTypes.DbPostalAddress", "PostalAddress", b1 =>
                        {
                            b1.Property<Guid>("DbLocationSpecificationAddressEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AddressLine1")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("AddressLine2")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("AddressLine3")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("AddressLine4")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("AddressLine5")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("AddressLine6")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.HasKey("DbLocationSpecificationAddressEntityId");

                            b1.ToTable("LocationSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbLocationSpecificationAddressEntityId");
                        });

                    b.Navigation("PostalAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbLocationSpecificationCoordinates", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbDataTypes.DbCoordinates", "Coordinates", b1 =>
                        {
                            b1.Property<Guid>("DbLocationSpecificationCoordinatesEntityId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Lat")
                                .HasColumnType("double precision");

                            b1.Property<double>("Lon")
                                .HasColumnType("double precision");

                            b1.HasKey("DbLocationSpecificationCoordinatesEntityId");

                            b1.ToTable("LocationSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbLocationSpecificationCoordinatesEntityId");
                        });

                    b.Navigation("Coordinates")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbLocationSpecificationRegion", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbDataTypes.DbRegion", "Region", b1 =>
                        {
                            b1.Property<Guid>("DbLocationSpecificationRegionEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("RegionName")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.HasKey("DbLocationSpecificationRegionEntityId");

                            b1.ToTable("LocationSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbLocationSpecificationRegionEntityId");
                        });

                    b.Navigation("Region")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbLocationSpecificationRemote", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbDataTypes.DbUrl", "Link", b1 =>
                        {
                            b1.Property<Guid>("DbLocationSpecificationRemoteEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("RawUrl")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.HasKey("DbLocationSpecificationRemoteEntityId");

                            b1.ToTable("LocationSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbLocationSpecificationRemoteEntityId");
                        });

                    b.Navigation("Link")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbTimeSpecificationPeriod", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbEntities.DbTimeSpecificationPeriodEndConnection", "End", b1 =>
                        {
                            b1.Property<Guid>("DbTimeSpecificationPeriodEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MomentId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbTimeSpecificationPeriodEntityId");

                            b1.HasIndex("MomentId");

                            b1.ToTable("TimeSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbTimeSpecificationPeriodEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbTimeSpecificationMoment", "Moment")
                                .WithMany()
                                .HasForeignKey("MomentId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Moment");
                        });

                    b.OwnsOne("Infrastructure.Data.DbEntities.DbTimeSpecificationPeriodStartConnection", "Start", b1 =>
                        {
                            b1.Property<Guid>("DbTimeSpecificationPeriodEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MomentId")
                                .HasColumnType("uuid");

                            b1.HasKey("DbTimeSpecificationPeriodEntityId");

                            b1.HasIndex("MomentId");

                            b1.ToTable("TimeSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbTimeSpecificationPeriodEntityId");

                            b1.HasOne("Infrastructure.Data.DbEntities.DbTimeSpecificationMoment", "Moment")
                                .WithMany()
                                .HasForeignKey("MomentId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Moment");
                        });

                    b.Navigation("End")
                        .IsRequired();

                    b.Navigation("Start")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbTimeSpecificationMonth", b =>
                {
                    b.OwnsOne("Infrastructure.Data.DbDataTypes.DbMonth", "Month", b1 =>
                        {
                            b1.Property<Guid>("DbTimeSpecificationMonthEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("MonthFromOneToTwelve")
                                .HasColumnType("integer");

                            b1.HasKey("DbTimeSpecificationMonthEntityId");

                            b1.ToTable("TimeSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("DbTimeSpecificationMonthEntityId");

                            b1.OwnsOne("Infrastructure.Data.DbDataTypes.DbYear", "Year", b2 =>
                                {
                                    b2.Property<Guid>("DbMonthDbTimeSpecificationMonthEntityId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("YearNumber")
                                        .HasColumnType("integer");

                                    b2.HasKey("DbMonthDbTimeSpecificationMonthEntityId");

                                    b2.ToTable("TimeSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("DbMonthDbTimeSpecificationMonthEntityId");
                                });

                            b1.Navigation("Year")
                                .IsRequired();
                        });

                    b.Navigation("Month")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbModificationHistory", b =>
                {
                    b.Navigation("HistoryItems");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbOrganizationConnection", b =>
                {
                    b.Navigation("OrganizationPositions");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbProject", b =>
                {
                    b.Navigation("ConnectedOrganizations");

                    b.Navigation("ContactSpecifications");

                    b.Navigation("Contributors");

                    b.Navigation("DescriptionSpecifications");

                    b.Navigation("GraphicsSpecifications");

                    b.Navigation("LocationSpecifications");

                    b.Navigation("Owner");

                    b.Navigation("ProjectTags");

                    b.Navigation("RelatedProjects");

                    b.Navigation("RequirementSpecifications");

                    b.Navigation("TimeSpecifications");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbRequirementSpecification", b =>
                {
                    b.Navigation("QuantitySpecification");

                    b.Navigation("TimeSpecifications");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbRequirementSpecificationMaterial", b =>
                {
                    b.Navigation("LocationSpecifications");

                    b.Navigation("MaterialSpecifications");
                });

            modelBuilder.Entity("Infrastructure.Data.DbEntities.DbRequirementSpecificationPerson", b =>
                {
                    b.Navigation("LocationSpecifications");

                    b.Navigation("SkillSpecifications");

                    b.Navigation("WorkAmountSpecification");
                });
#pragma warning restore 612, 618
        }
    }
}
