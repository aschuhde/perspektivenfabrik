/**
 * WebApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApplicationExampleAnonymousGetExampleAnonymousGetExampleAnonymousResponse } from '../model/applicationExampleAnonymousGetExampleAnonymousGetExampleAnonymousResponse';
import { ApplicationExampleGetExampleGetExampleResponse } from '../model/applicationExampleGetExampleGetExampleResponse';
import { ApplicationGetJsonTypeDiscriminatorNamesGetJsonTypeDiscriminatorNamesGetJsonTypeDiscriminatorNamesResponse } from '../model/applicationGetJsonTypeDiscriminatorNamesGetJsonTypeDiscriminatorNamesGetJsonTypeDiscriminatorNamesResponse';
import { ApplicationGetProjectGetProjectGetProjectResponse } from '../model/applicationGetProjectGetProjectGetProjectResponse';
import { ApplicationGetProjectsGetProjectsGetProjectsResponse } from '../model/applicationGetProjectsGetProjectsGetProjectsResponse';
import { ApplicationJwtRefreshTokenJwtRefreshTokenJwtRefreshTokenRequest } from '../model/applicationJwtRefreshTokenJwtRefreshTokenJwtRefreshTokenRequest';
import { ApplicationJwtRefreshTokenJwtRefreshTokenJwtRefreshTokenResponse } from '../model/applicationJwtRefreshTokenJwtRefreshTokenJwtRefreshTokenResponse';
import { ApplicationJwtTokenJwtTokenRequest } from '../model/applicationJwtTokenJwtTokenRequest';
import { ApplicationJwtTokenJwtTokenResponse } from '../model/applicationJwtTokenJwtTokenResponse';
import { ApplicationPostProjectPostProjectPostProjectRequest } from '../model/applicationPostProjectPostProjectPostProjectRequest';
import { ApplicationPostProjectPostProjectPostProjectResponse } from '../model/applicationPostProjectPostProjectPostProjectResponse';
import { ApplicationPutProjectPutProjectPutProjectRequest } from '../model/applicationPutProjectPutProjectPutProjectRequest';
import { ApplicationPutProjectPutProjectPutProjectResponse } from '../model/applicationPutProjectPutProjectPutProjectResponse';
import { Filter } from '../model/filter';
import { Selector } from '../model/selector';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ApiService {

    protected basePath = 'http://api:8081';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param u 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webApiEndpointsGetExample(u?: boolean, observe?: 'body', reportProgress?: boolean): Observable<ApplicationExampleGetExampleGetExampleResponse>;
    public webApiEndpointsGetExample(u?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApplicationExampleGetExampleGetExampleResponse>>;
    public webApiEndpointsGetExample(u?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApplicationExampleGetExampleGetExampleResponse>>;
    public webApiEndpointsGetExample(u?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (u !== undefined && u !== null) {
            queryParameters = queryParameters.set('_', <any>u);
        }

        let headers = this.defaultHeaders;

        // authentication (JWTBearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ApplicationExampleGetExampleGetExampleResponse>('get',`${this.basePath}/api/example`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param test 
     * @param test2 
     * @param u 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webApiEndpointsGetExampleAnonymous(test?: string, test2?: string, u?: boolean, observe?: 'body', reportProgress?: boolean): Observable<ApplicationExampleAnonymousGetExampleAnonymousGetExampleAnonymousResponse>;
    public webApiEndpointsGetExampleAnonymous(test?: string, test2?: string, u?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApplicationExampleAnonymousGetExampleAnonymousGetExampleAnonymousResponse>>;
    public webApiEndpointsGetExampleAnonymous(test?: string, test2?: string, u?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApplicationExampleAnonymousGetExampleAnonymousGetExampleAnonymousResponse>>;
    public webApiEndpointsGetExampleAnonymous(test?: string, test2?: string, u?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (test !== undefined && test !== null) {
            queryParameters = queryParameters.set('test', <any>test);
        }
        if (test2 !== undefined && test2 !== null) {
            queryParameters = queryParameters.set('test2', <any>test2);
        }
        if (u !== undefined && u !== null) {
            queryParameters = queryParameters.set('_', <any>u);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ApplicationExampleAnonymousGetExampleAnonymousGetExampleAnonymousResponse>('get',`${this.basePath}/api/example-anonymous`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param u 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webApiEndpointsGetJsonTypeDiscriminatorNames(u?: boolean, observe?: 'body', reportProgress?: boolean): Observable<ApplicationGetJsonTypeDiscriminatorNamesGetJsonTypeDiscriminatorNamesGetJsonTypeDiscriminatorNamesResponse>;
    public webApiEndpointsGetJsonTypeDiscriminatorNames(u?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApplicationGetJsonTypeDiscriminatorNamesGetJsonTypeDiscriminatorNamesGetJsonTypeDiscriminatorNamesResponse>>;
    public webApiEndpointsGetJsonTypeDiscriminatorNames(u?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApplicationGetJsonTypeDiscriminatorNamesGetJsonTypeDiscriminatorNamesGetJsonTypeDiscriminatorNamesResponse>>;
    public webApiEndpointsGetJsonTypeDiscriminatorNames(u?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (u !== undefined && u !== null) {
            queryParameters = queryParameters.set('_', <any>u);
        }

        let headers = this.defaultHeaders;

        // authentication (JWTBearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ApplicationGetJsonTypeDiscriminatorNamesGetJsonTypeDiscriminatorNamesGetJsonTypeDiscriminatorNamesResponse>('get',`${this.basePath}/api/json-type-discriminator-names`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param projectIdentifier 
     * @param u 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webApiEndpointsGetProject(projectIdentifier: string, u?: boolean, observe?: 'body', reportProgress?: boolean): Observable<ApplicationGetProjectGetProjectGetProjectResponse>;
    public webApiEndpointsGetProject(projectIdentifier: string, u?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApplicationGetProjectGetProjectGetProjectResponse>>;
    public webApiEndpointsGetProject(projectIdentifier: string, u?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApplicationGetProjectGetProjectGetProjectResponse>>;
    public webApiEndpointsGetProject(projectIdentifier: string, u?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (projectIdentifier === null || projectIdentifier === undefined) {
            throw new Error('Required parameter projectIdentifier was null or undefined when calling webApiEndpointsGetProject.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (u !== undefined && u !== null) {
            queryParameters = queryParameters.set('_', <any>u);
        }

        let headers = this.defaultHeaders;

        // authentication (JWTBearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ApplicationGetProjectGetProjectGetProjectResponse>('get',`${this.basePath}/api/projects/${encodeURIComponent(String(projectIdentifier))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param filter 
     * @param selector 
     * @param u 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webApiEndpointsGetProjects(filter?: Filter, selector?: Selector, u?: boolean, observe?: 'body', reportProgress?: boolean): Observable<ApplicationGetProjectsGetProjectsGetProjectsResponse>;
    public webApiEndpointsGetProjects(filter?: Filter, selector?: Selector, u?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApplicationGetProjectsGetProjectsGetProjectsResponse>>;
    public webApiEndpointsGetProjects(filter?: Filter, selector?: Selector, u?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApplicationGetProjectsGetProjectsGetProjectsResponse>>;
    public webApiEndpointsGetProjects(filter?: Filter, selector?: Selector, u?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }
        if (selector !== undefined && selector !== null) {
            queryParameters = queryParameters.set('selector', <any>selector);
        }
        if (u !== undefined && u !== null) {
            queryParameters = queryParameters.set('_', <any>u);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ApplicationGetProjectsGetProjectsGetProjectsResponse>('get',`${this.basePath}/api/projects`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webApiEndpointsJwtRefreshToken(body: ApplicationJwtRefreshTokenJwtRefreshTokenJwtRefreshTokenRequest, observe?: 'body', reportProgress?: boolean): Observable<ApplicationJwtRefreshTokenJwtRefreshTokenJwtRefreshTokenResponse>;
    public webApiEndpointsJwtRefreshToken(body: ApplicationJwtRefreshTokenJwtRefreshTokenJwtRefreshTokenRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApplicationJwtRefreshTokenJwtRefreshTokenJwtRefreshTokenResponse>>;
    public webApiEndpointsJwtRefreshToken(body: ApplicationJwtRefreshTokenJwtRefreshTokenJwtRefreshTokenRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApplicationJwtRefreshTokenJwtRefreshTokenJwtRefreshTokenResponse>>;
    public webApiEndpointsJwtRefreshToken(body: ApplicationJwtRefreshTokenJwtRefreshTokenJwtRefreshTokenRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling webApiEndpointsJwtRefreshToken.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ApplicationJwtRefreshTokenJwtRefreshTokenJwtRefreshTokenResponse>('post',`${this.basePath}/api/refresh-token`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webApiEndpointsJwtToken(body: ApplicationJwtTokenJwtTokenRequest, observe?: 'body', reportProgress?: boolean): Observable<ApplicationJwtTokenJwtTokenResponse>;
    public webApiEndpointsJwtToken(body: ApplicationJwtTokenJwtTokenRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApplicationJwtTokenJwtTokenResponse>>;
    public webApiEndpointsJwtToken(body: ApplicationJwtTokenJwtTokenRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApplicationJwtTokenJwtTokenResponse>>;
    public webApiEndpointsJwtToken(body: ApplicationJwtTokenJwtTokenRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling webApiEndpointsJwtToken.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ApplicationJwtTokenJwtTokenResponse>('post',`${this.basePath}/api/token`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webApiEndpointsPostProject(body: ApplicationPostProjectPostProjectPostProjectRequest, observe?: 'body', reportProgress?: boolean): Observable<ApplicationPostProjectPostProjectPostProjectResponse>;
    public webApiEndpointsPostProject(body: ApplicationPostProjectPostProjectPostProjectRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApplicationPostProjectPostProjectPostProjectResponse>>;
    public webApiEndpointsPostProject(body: ApplicationPostProjectPostProjectPostProjectRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApplicationPostProjectPostProjectPostProjectResponse>>;
    public webApiEndpointsPostProject(body: ApplicationPostProjectPostProjectPostProjectRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling webApiEndpointsPostProject.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWTBearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ApplicationPostProjectPostProjectPostProjectResponse>('post',`${this.basePath}/api/projects`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webApiEndpointsPutProject(body: ApplicationPutProjectPutProjectPutProjectRequest, entityId: string, observe?: 'body', reportProgress?: boolean): Observable<ApplicationPutProjectPutProjectPutProjectResponse>;
    public webApiEndpointsPutProject(body: ApplicationPutProjectPutProjectPutProjectRequest, entityId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApplicationPutProjectPutProjectPutProjectResponse>>;
    public webApiEndpointsPutProject(body: ApplicationPutProjectPutProjectPutProjectRequest, entityId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApplicationPutProjectPutProjectPutProjectResponse>>;
    public webApiEndpointsPutProject(body: ApplicationPutProjectPutProjectPutProjectRequest, entityId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling webApiEndpointsPutProject.');
        }

        if (entityId === null || entityId === undefined) {
            throw new Error('Required parameter entityId was null or undefined when calling webApiEndpointsPutProject.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWTBearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ApplicationPutProjectPutProjectPutProjectResponse>('put',`${this.basePath}/api/projects/${encodeURIComponent(String(entityId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
